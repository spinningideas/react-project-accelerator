{"version":3,"file":"static/js/245.9121af8a.chunk.js","mappings":"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","sources":["pages/Contact.tsx","services/NotificationsService.ts"],"sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\r\n// forms\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"formik-mui\";\r\n// material-ui\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Grid from \"@mui/material/Grid\";\r\n// services\r\nimport LocalizationService from \"services/LocalizationService\";\r\nimport NotificationsService from \"services/NotificationsService\";\r\n// models\r\nimport ContactSubmission from \"models/ContactSubmission\";\r\n\r\nexport default function Contact(props) {\r\n  const [locData, setLocData] = useState<Record<string, string>>({});\r\n  const [formIsSubmitting, setFormIsSubmitting] = useState<boolean>(false);\r\n  const [formData, setFormData] = useState<ContactSubmission>({\r\n    name:\r\n      props.match && props.match.params && props.match.params.name\r\n        ? props.match.params.name\r\n        : \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n  });\r\n\r\n  const localizationService = useMemo(LocalizationService, []);\r\n  const notificationsService = useMemo(NotificationsService, []);\r\n\r\n  useEffect(() => {\r\n    async function loadLocalization() {\r\n      const locCode = localizationService.getUserLocale();\r\n\r\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\r\n        [\r\n          \"contact\",\r\n          \"contactdescription\",\r\n          \"moreinfo\",\r\n          \"save\",\r\n          \"name\",\r\n          \"email\",\r\n          \"message\",\r\n          \"messagedescription\",\r\n          \"required\",\r\n          \"success\",\r\n        ],\r\n        locCode\r\n      );\r\n      setLocData(locDataLoaded);\r\n    }\r\n    loadLocalization();\r\n  }, [localizationService, notificationsService]);\r\n\r\n  const styles = {\r\n    formField: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      margin: 1,\r\n      width: 500,\r\n    },\r\n  };\r\n\r\n  const showNotification = (message, type) => {\r\n    notificationsService.show(message, type);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={0}>\r\n      <Grid item xs={12}>\r\n        <h3>{locData.contact}</h3>\r\n        <p>{locData.contactdescription}</p>\r\n\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={12} md={12} lg={12} xl={12}>\r\n            <Formik\r\n              initialValues={formData}\r\n              validate={(values: ContactSubmission) => {\r\n                const errors = {} as any;\r\n                if (!values.name) {\r\n                  errors.name = locData.required;\r\n                }\r\n                if (!values.email) {\r\n                  errors.email = locData.required;\r\n                } else if (\r\n                  !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(\r\n                    values.email\r\n                  )\r\n                ) {\r\n                  errors.email = \"Invalid email address\";\r\n                }\r\n                if (!values.message) {\r\n                  errors.message = locData.required;\r\n                }\r\n                return errors;\r\n              }}\r\n              onSubmit={(values) => {\r\n                setFormIsSubmitting(false);\r\n                showNotification(locData.success, \"success\");\r\n                setFormData({\r\n                  name: values.name,\r\n                  email: values.email,\r\n                  message: values.message,\r\n                });\r\n              }}\r\n            >\r\n              {({ submitForm }) => (\r\n                <Form>\r\n                  <Card>\r\n                    <CardContent sx={{ p: 0 }}>\r\n                      <Field\r\n                        sx={styles.formField}\r\n                        component={TextField}\r\n                        variant=\"standard\"\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        label={locData.name}\r\n                        required\r\n                      />\r\n\r\n                      <Field\r\n                        sx={styles.formField}\r\n                        component={TextField}\r\n                        variant=\"standard\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        label={locData.email}\r\n                        required\r\n                      />\r\n\r\n                      <Field\r\n                        sx={styles.formField}\r\n                        type=\"text\"\r\n                        component={TextField}\r\n                        variant=\"standard\"\r\n                        name=\"message\"\r\n                        label={locData.message}\r\n                        required\r\n                        multiline\r\n                        rows={4}\r\n                      />\r\n                    </CardContent>\r\n                    <CardActions>\r\n                      <Button\r\n                        className=\"ml-2\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        disabled={formIsSubmitting}\r\n                        onClick={submitForm}\r\n                      >\r\n                        {locData.save}\r\n                      </Button>\r\n                    </CardActions>\r\n                  </Card>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { useSnackbar, VariantType } from \"notistack\";\r\n\r\n/* Notifications Service - encapsulates collection of \"Toast\" style \r\nmessages of given type (eg success, warning, error) \r\n\r\nNOTE: Assumes setup of notistack SnackbarProvider at the application level\r\n*/\r\nconst NotificationsService = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const show = (msg: string, type?: string) => {\r\n    addNotification(msg, type ? (type as VariantType) : \"success\");\r\n  };\r\n\r\n  const success = (msg: string) => {\r\n    addNotification(msg, \"success\");\r\n  };\r\n\r\n  const error = (msg: string) => {\r\n    addNotification(msg, \"error\");\r\n  };\r\n\r\n  const info = (msg: string) => {\r\n    addNotification(msg, \"info\");\r\n  };\r\n\r\n  const addNotification = (msg: string, type: VariantType) => {\r\n    // variant can be success, error, warning, info, or default\r\n    enqueueSnackbar(msg, { variant: type });\r\n  };\r\n\r\n  return {\r\n    show,\r\n    success,\r\n    error,\r\n    info,\r\n  };\r\n};\r\n\r\nexport default NotificationsService;\r\n"],"names":["Contact","props","locData","setLocData","useState","formIsSubmitting","setFormIsSubmitting","formData","setFormData","name","match","params","email","message","localizationService","useMemo","LocalizationService","notificationsService","NotificationsService","useEffect","async","locCode","getUserLocale","locDataLoaded","getLocalizedTextSet","loadLocalization","styles","formField","display","flexDirection","margin","width","_jsx","Grid","container","spacing","children","_jsxs","item","xs","contact","contactdescription","md","lg","xl","Formik","initialValues","validate","values","errors","required","test","onSubmit","showNotification","type","success","show","_ref","submitForm","Form","Card","CardContent","sx","p","Field","component","TextField","variant","label","multiline","rows","CardActions","Button","className","color","disabled","onClick","save","enqueueSnackbar","useSnackbar","addNotification","msg","error","info"],"sourceRoot":""}