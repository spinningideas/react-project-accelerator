{"version":3,"sources":["components/Shared/Notifications.js","pages/Contact.js"],"names":["NotificationItem","props","React","createElement","className","theme","onClick","hideNotification","id","title","msg","Notifications","show","type","addNotification","success","duration","error","info","n","state","notifications","newNotificationKey","currentNotificationKey","setState","hideAfterDurationElapses","key","setTimeout","topStyle","window","pageYOffset","hide","this","el","map","notification","style","top","Component","Contact","useState","locData","setLocData","formIsSubmitting","setFormIsSubmitting","name","email","message","formData","setFormData","localizationService","LocalizationService","notificationsRef","useRef","useEffect","a","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","classes","makeStyles","formField","margin","spacing","width","useStyles","container","item","xs","contact","contactdescription","md","lg","xl","initialValues","validate","values","errors","required","test","onSubmit","current","submitForm","component","TextField","label","multiline","rows","color","disabled","save","ref"],"mappings":"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","file":"static/js/6.abfbc046.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet defaultDurationMilliseconds = 5000; // ms\r\n/* React \"Toast\" Component which encapsulates a given popup style UI message - re-factored from https://github.com/k4wo/react-notify */\r\nfunction NotificationItem(props) {\r\n  const hideNotification = () => {\r\n    props.hideNotification(props.id);\r\n  };\r\n\r\n  return React.createElement(\r\n    'div',\r\n    { className: 'notification-item ' + props.theme, onClick: hideNotification },\r\n    React.createElement('p', { className: 'notification-title' }, props.title),\r\n    React.createElement('p', { className: 'notification-body' }, props.msg)\r\n  );\r\n}\r\n\r\n/* Notifications container - encapsulates collection of \"Toast\" style messages of various types (eg success, warning, error) */\r\n// NOTE: Cannot use stateless function here as a backing instance is required.\r\n// See https://reactjs.org/docs/components-and-props.html#stateless-functions\r\n// TODO: see if there is a way to convert this into functional component\r\n// to remove this and adhere to guidance on strong preference for functional components\r\nclass Notifications extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentNotificationKey: 0, notifications: [] };\r\n  }\r\n\r\n  show = (msg, type) => {\r\n    this.addNotification('', msg, defaultDurationMilliseconds, type);\r\n  };\r\n\r\n  success = (title, msg, duration) => {\r\n    this.addNotification(title, msg, duration, 'success');\r\n  };\r\n\r\n  error = (title, msg, duration) => {\r\n    this.addNotification(title, msg, duration, 'error');\r\n  };\r\n\r\n  info = (title, msg, duration) => {\r\n    this.addNotification(title, msg, duration, 'info');\r\n  };\r\n\r\n  addNotification = (title, msg, duration, type) => {\r\n    var n = this.state.notifications;\r\n    var newNotificationKey = this.state.currentNotificationKey;\r\n    newNotificationKey = newNotificationKey++;\r\n    n[newNotificationKey] = { title: title, msg: msg, duration: duration, theme: type };\r\n    this.setState({ currentNotificationKey: newNotificationKey, notifications: n });\r\n    this.hideAfterDurationElapses(duration, newNotificationKey);\r\n  };\r\n\r\n  hideAfterDurationElapses = (duration, key) => {\r\n    setTimeout(() => {\r\n      this.hideNotification(key);\r\n    }, duration);\r\n  };\r\n\r\n  hideNotification = (key) => {\r\n    var n = this.state.notifications;\r\n    delete n[key];\r\n    this.setState({ notifications: n });\r\n  };\r\n\r\n  render() {\r\n    var topStyle = window.pageYOffset + 'px';\r\n    var hide = this.hideNotification;\r\n    var el = this.state.notifications.map((notification, key) => {\r\n      return React.createElement(NotificationItem, {\r\n        id: key,\r\n        key: key,\r\n        theme: notification.theme,\r\n        hideNotification: hide,\r\n        title: notification.title,\r\n        msg: notification.msg\r\n      });\r\n    });\r\n    return React.createElement('div', { style: { top: topStyle }, className: 'notification-container' }, el);\r\n  }\r\n}\r\n\r\nexport default Notifications;\r\n","import React, { useEffect, useState, useRef } from 'react';\n// forms\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n// shared components\nimport Notifications from 'components/Shared/Notifications';\n// Services\nimport LocalizationService from 'services/LocalizationService';\n\nexport default function Contact() {\n  const [locData, setLocData] = useState({});\n  const [formIsSubmitting, setFormIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const localizationService = LocalizationService();\n\n  const notificationsRef = useRef(null);\n\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        [\n          'contact',\n          'contactdescription',\n          'moreinfo',\n          'save',\n          'name',\n          'email',\n          'message',\n\t\t\t\t\t'messagedescription',\n\t\t\t\t\t'required',\n          'success'\n        ],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  const useStyles = makeStyles((theme) => ({\n    formField: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 400\n      }\n    }\n  }));\n\n  const classes = useStyles();\n\n  const showNotification = (message, type) => {\n    notificationsRef.current.show(message, type);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <h3>{locData.contact}</h3>\n        <p>{locData.contactdescription}</p>\n\n        <Grid container spacing={0}>\n          <Grid item xs={12} md={12} lg={12} xl={12}>\n            <Formik\n              initialValues={formData}\n              validate={(values) => {\n                const errors = {};\n                if (!values.name) {\n                  errors.name = locData.required;\n                }\n                if (!values.email) {\n                  errors.email = locData.required;\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                  errors.email = 'Invalid email address';\n                }\n                if (!values.message) {\n                  errors.message = locData.required;\n                }\n                return errors;\n              }}\n              onSubmit={(values) => {\n                setFormIsSubmitting(false);\n                showNotification(locData.success, 'success');\n                setFormData({\n                  name: values.name,\n                  email: values.email,\n                  message: values.message\n                });\n              }}\n            >\n              {({ submitForm }) => (\n                <Form>\n                  <Card>\n                    <CardContent>\n                      <div className={classes.formField}>\n                        <Field component={TextField} name=\"name\" type=\"text\" label={locData.name} required />\n                      </div>\n                      <div className={classes.formField}>\n                        <Field component={TextField} name=\"email\" type=\"email\" label={locData.email} required />\n                      </div>\n                      <div className={classes.formField}>\n                        <Field\n                          type=\"text\"\n                          component={TextField}\n                          name=\"message\"\n                          label={locData.message}\n                          required\n                          multiline\n                          rows={4}\n                        />\n                      </div>\n                    </CardContent>\n                    <CardActions>\n                      <Button className=\"ml-2\" color=\"secondary\" disabled={formIsSubmitting} onClick={submitForm}>\n                        {locData.save}\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </Form>\n              )}\n            </Formik>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Notifications ref={notificationsRef} />\n    </Grid>\n  );\n}\n"],"sourceRoot":""}